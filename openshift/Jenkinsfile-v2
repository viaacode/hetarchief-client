pipeline {
	agent {
		kubernetes {
			defaultContainer 'default'
			yaml """
                apiVersion: v1
                kind: Pod
                metadata:
                    labels:
                        component: builder
                        lang: ${getBaseImageName()}
                        app: client
                spec:
                    containers:
                    - name: default
                      image: ${getImageFromDockerfile()}
                      command:
                        - cat
                      tty: true
                      securityContext:
                        runAsUser: 1000
                    - name: oc
                      image: image-registry.openshift-image-registry.svc:5000/ci-cd/py:3.7
                      command:
                        - cat
                      tty: true
                      imagePullPolicy: Always
                    - name: hasura-cli
                      image: hasura/graphql-engine:v2.6.0.cli-migrations-v3
                      command:
                        - cat
                      tty: true
                      imagePullPolicy: Always
            """.stripIndent()
		}
	}
	options {
		timeout(time: 45, unit: 'MINUTES')
		disableConcurrentBuilds()
	}
	environment {
		OC_PROJECT = 'hetarchief'
		BASE_IMG = "${getImageFromDockerfile()}"
		BASE_IMG_NAME = "${getBaseImageName()}"
		OC_URL = 'https://c113-e.private.eu-de.containers.cloud.ibm.com:30227'
		JIRA_URL = 'meemoo.atlassian.net'
		APP_NAME = 'client'
		DEBUG_TOOLS = 'true'
	}

	stages {
		stage('Calculate extra ENV vars') {
			steps {
				container('oc') {
					script {
						env.GIT_SHORT_COMMIT = sh(script: "printf \$(git rev-parse --short ${GIT_COMMIT})", returnStdout: true)
						env.IMAGE_TAG = sh(script: 'git describe --tags || echo latest', returnStdout: true)
						// The name used for the build config based on the image tag
						// Replace '.' with '_' as '.' is not allowed.
						// env.BUILD_CONFIG_NAME = sh(script: 'echo "${IMAGE_TAG}" | sed -r "s/\\./\\-/g"', returnStdout: true)
					}
				}
			}
		}
		stage('Test code') {
			steps {
				container('default') {
					script {
						sh '''#!/bin/bash
                            npm ci --include=dev
                            npm run test:ci
                        '''
					}
				}
			}
		}
		stage('Build code') {
			when {
				not {
					buildingTag()
				}
				not {
					branch 'develop'
				}

			}
			steps {
				container('oc') {
					script {
						sh '''#!/bin/bash
                            oc project $OC_PROJECT
                            oc import-image $BASE_IMG --confirm
                            oc set image-lookup $BASE_IMG_NAME
                            oc new-build -l ref=$BRANCH_NAME --strategy=docker --name $APP_NAME --to $APP_NAME:$GIT_SHORT_COMMIT --binary --context-dir="" || echo "Probably already exists, start new build"
                            sleep 3
                            oc annotate --overwrite buildconfig/$APP_NAME ref=$BRANCH_NAME shortcommit=$GIT_SHORT_COMMIT
                            patch-bc-current-ref.sh
                            oc start-build --follow=true --wait=true --env CLIENT_URL=https://hetarchief.be --from-dir=. $APP_NAME
                        '''
					}
				}
			}
		}
		// stage('e2e-prepare') {
		// 	when {
		// 		anyOf { branch 'develop'; branch 'development' }
		// 	}
		// 	steps {
		// 		container('hasura-cli') {
		// 			script {
		// 				withCredentials([string(credentialsId: 'admin_secret', variable: 'ADMIN_SECRET')]) {
		// 					git branch: 'develop',
		// 						credentialsId: 'meemoo-ci',
		// 						url: 'https://github.com/viaacode/hetarchief-hasura.git'
		// 					sh """#!/bin/bash
        //                         pwd
        //                         ls -ltra
        //                         echo $ADMIN_SECRET
        //                         hasura-cli seed apply --endpoint=https://hasura-graphql-int-hetarchief.private.cloud.meemoo.be --admin-secret=${ADMIN_SECRET} --database-name hetarchief || echo failed ; exit 0
        //                     """
		// 				}///end credentials
		// 			}//end script
		// 		}// end container
		// 	}//end steps
		// }//end stage
		// stage('e2e') {
		// 	agent { label 'node' }
		// 	when {
		// 		anyOf { branch 'develop'; branch 'development' }
		// 	}
		// 	steps {
		// 		script {
		// 			//loadEnvironmentVariablesFromFile("env_vars")
		// 			configFileProvider(
		// 				[configFile(fileId: 'end2end_env', variable: 'end2end_env')]) {
		// 				sh "cat $end2end_env > .env"

		// 				loadEnvironmentVariablesFromFile('.env')
		// 			}
		// 			sh 'echo ${TEST_ACM_DASHBOARD_USERNAME}'
		// 			docker.image('mcr.microsoft.com/playwright:v1.25.0').inside('-e TEST_CLIENT_ENDPOINT=${TEST_CLIENT_ENDPOINT}  -e TEST_PROXY_ENDPOINT=${TEST_PROXY_ENDPOINT}   -e TEST_OBJECT_DETAIL_PAGE_VRT=${TEST_OBJECT_DETAIL_PAGE_VRT}  -e TEST_OBJECT_DETAIL_PAGE_AMSAB=${TEST_OBJECT_DETAIL_PAGE_AMSAB}  -e TEST_OBJECT_DETAIL_PAGE_VLAAMS_PARLEMENT=${TEST_OBJECT_DETAIL_PAGE_VLAAMS_PARLEMENT}  -e TEST_CP_ADMIN_VRT_ACCOUNT_USERNAME=${TEST_CP_ADMIN_VRT_ACCOUNT_USERNAME}  -e TEST_CP_ADMIN_VRT_ACCOUNT_PASSWORD=${TEST_CP_ADMIN_VRT_ACCOUNT_PASSWORD}  -e TEST_CP_ADMIN_AMSAB_ACCOUNT_USERNAME=${TEST_CP_ADMIN_AMSAB_ACCOUNT_USERNAME}  -e TEST_CP_ADMIN_AMSAB_ACCOUNT_PASSWORD=${TEST_CP_ADMIN_AMSAB_ACCOUNT_PASSWORD}  -e TEST_MEEMOO_ADMIN_ACCOUNT_USERNAME=${TEST_MEEMOO_ADMIN_ACCOUNT_USERNAME}  -e TEST_MEEMOO_ADMIN_ACCOUNT_PASSWORD=${TEST_MEEMOO_ADMIN_ACCOUNT_PASSWORD}  -e TEST_ACM_DASHBOARD=${TEST_ACM_DASHBOARD}  -e TEST_ACM_DASHBOARD_USERNAME=${TEST_ACM_DASHBOARD_USERNAME}  -e TEST_ACM_DASHBOARD_PASSWORD=${TEST_ACM_DASHBOARD_PASSWORD}')
		// 				{
		// 					git branch: 'develop',
		// 						credentialsId: 'meemoo-ci',
		// 						url: 'https://github.com/viaacode/hetarchief-client.git'
		// 					catchError() {
		// 						sh '''ls -ltra
        //                             export NODE_ENV=dev
        //                             npm pkg delete scripts.prepare
        //                             cd ./tests
        //                             npm install
        //                             npx playwright install
        //                             npx playwright install chrome
        //                             npm install junit-report-builder --save --force
        //                         '''
		// 						sh "PLAYWRIGHT_JUNIT_OUTPUT_NAME=tests/e2e_test_results.xml npx playwright test --reporter=junit || echo failed && ls tests"
		// 						junit 'tests/e2e_test_results.xml'
		// 					}
		// 				}
		// 		} //end script
		// 	}
		// }
		stage('Deploy QAS') {
			when {
				anyOf { branch 'master-v2'; branch 'main-v2' }
			}
			steps {
				container('oc') {
					tagNewImage('qas')
				}
			}
			post {
				always {
					jiraSendDeploymentInfo site: "${JIRA_URL}", environmentId: 'qas', environmentName: 'qas', environmentType: 'staging'
				}
			}
		}
		stage('Deploy PRD') {
			when {
				buildingTag()
			}
			steps {
				container('oc') {
					tagNewImage('prd')
				}
			}
			post {
				always {
					jiraSendDeploymentInfo site: "${JIRA_URL}", environmentId: 'prd', environmentName: 'prd', environmentType: 'production'
				}
			}
		}
	}
	post {
		success {
			script {
				if (env.BRANCH_NAME.startsWith('PR')) {
					setGitHubBuildStatus('Build', 'SUCCESS')
				}
			}
		}
		failure {
			script {
				if (env.BRANCH_NAME.startsWith('PR')) {
					setGitHubBuildStatus('Build', 'FAILURE')
				}
			}
		}
		always {
			jiraSendBuildInfo site: "${JIRA_URL}"
			container('default') {
				// Archive tets results
				script {
					if (fileExists('./tests/test_results/junit.xml')) {
						junit 'tests/test_results/junit.xml'
					} else {
						echo 'No test results found'
					}
				}
			}
		}
	}
}

static String getImageFromDockerfile() {
	return 'node:20.4'
}

static void getBaseImageName() {
	return getImageFromDockerfile().split(':')[0]
}

void setGitHubBuildStatus(String message, String state) {
	step([
		$class            : 'GitHubCommitStatusSetter',
		reposSource       : [$class: 'ManuallyEnteredRepositorySource', url: "${GIT_URL}"],
		commitShaSource   : [$class: 'ManuallyEnteredShaSource', sha: "${GIT_COMMIT}"],
		errorHandlers     : [[$class: 'ChangingBuildStatusErrorHandler', result: 'UNSTABLE']],
		statusResultSource: [$class: 'ConditionalStatusResultSource', results: [[$class: 'AnyBuildResult', message: message, state: state]]]
	])
}

String getAllCommitsBetweenTags(String from, String to) {
	commit_messages = sh(script: "git log ${from}...${to} --merges --format=%b", returnStdout: true)

	return commit_messages
}

void tagNewImage(String environment) {
	echo "Deploying to ${environment}"
	sh """#!/bin/bash
		oc project $OC_PROJECT
		oc tag $APP_NAME:$GIT_SHORT_COMMIT $APP_NAME:${environment}
		# Check the status of the rollout
		oc rollout status deployment/$APP_NAME-${environment} --watch=true --timeout=10m
	"""
}

void loadEnvironmentVariablesFromFile(String path) {
	def file = readFile(path)
	file.split('\n').each { envLine ->
		def (key, value) = envLine.tokenize('=')
		env."${key}" = "${value}"
	}
}
