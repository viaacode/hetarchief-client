@use "sass:color";
@use "sass:math";
@use "styles/abstracts" as *;

@mixin scrollable-tabs-gradient($direction, $color) {
	background: linear-gradient(to $direction, color.adjust($color), transparent);
}

$scrollable-tabs-gradient-width: $spacer-lg;
$scrollable-tabs-gradient-width-lg: $spacer-md + $scrollable-tabs-gradient-width; // spacer-md equals rounding padder size

.c-scrollable-tabs {
	overflow: hidden;
	position: relative;

	&::before,
	&::after {
		position: absolute;
		top: 0;
		width: $scrollable-tabs-gradient-width;
		height: 100%;
		transition: transform $animate-default;
		content: "";
		pointer-events: none;
	}

	&::before {
		left: 0;
		transform: translateX(-$scrollable-tabs-gradient-width);
	}

	&::after {
		right: 0;
		transform: translateX($scrollable-tabs-gradient-width);
	}

	// Above :global
	&--bordered {
		border: 1px solid $zinc;

		:global(.c-tabs--bordered) {
			border: 0;
		}
	}

	:global(.c-tabs) {
		overflow-x: scroll;
		scrollbar-width: none; /* Firefox */

		&::-webkit-scrollbar { /* WebKit */
			width: 0;
			height: 0;
		}
	}

	&--dark {
		&::before {
			@include scrollable-tabs-gradient(right, $black);
		}

		&::after {
			@include scrollable-tabs-gradient(left, $black);
		}
	}

	&--light {
		&::before {
			@include scrollable-tabs-gradient(right, $white);
			
		}

		&::after {
			@include scrollable-tabs-gradient(left, $white);
		}
	}

	&--rounded {
		@include tabs-border-radius;
		
		&::before,
		&::after {
			width: $scrollable-tabs-gradient-width-lg;
		}

		&::before {
			transform: translateX(-$scrollable-tabs-gradient-width-lg);
		}

		&::after {
			transform: translateX($scrollable-tabs-gradient-width-lg);
		}
	}
}

/**
 * Modifiers
 */

.c-scrollable-tabs--gradient-left {
	&::before {
		transform: translateX(0);
	}
}

.c-scrollable-tabs--gradient-right {
	&::after {
		transform: translateX(0);
	}
}
